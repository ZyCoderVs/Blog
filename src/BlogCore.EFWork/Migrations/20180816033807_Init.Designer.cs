// <auto-generated />
using System;
using BlogCore.EFWork.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlogCore.EFWork.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20180816033807_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogCore.EFWork.Entity.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int?>("MenuId");

                    b.Property<int?>("TagId");

                    b.Property<string>("Title");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("BlogCore.EFWork.Entity.Menus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int?>("IsDelete");

                    b.Property<string>("MenuDesc");

                    b.Property<string>("MenuName");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("BlogCore.EFWork.Entity.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("TagName");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BlogCore.EFWork.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account");

                    b.Property<string>("Address");

                    b.Property<int?>("Age");

                    b.Property<string>("Company");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Name");

                    b.Property<string>("Pwd");

                    b.Property<string>("School");

                    b.Property<int?>("Sex");

                    b.Property<string>("Skill");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BlogCore.EFWork.Entity.Article", b =>
                {
                    b.HasOne("BlogCore.EFWork.Entity.Menus", "Menu")
                        .WithMany("Articles")
                        .HasForeignKey("MenuId");

                    b.HasOne("BlogCore.EFWork.Entity.Tag")
                        .WithMany("Articles")
                        .HasForeignKey("TagId");

                    b.HasOne("BlogCore.EFWork.Entity.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BlogCore.EFWork.Entity.Tag", b =>
                {
                    b.HasOne("BlogCore.EFWork.Entity.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
